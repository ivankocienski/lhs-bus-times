#!/usr/bin/perl

use strict;
use warnings;

print "Starting up...\n";

use LWP::UserAgent;
use IO::Handle;
use JSON;
use Curses;

#system "setfont CyrSlav-VGA32x16";

my $api_log;

open( $api_log, ">>", "/home/ivan/bus-times.log" ) or die $!;


my $stop_id = 76309; # pritchards road

my $url = "http://countdown.tfl.gov.uk/stopBoard/$stop_id";

my $ua = LWP::UserAgent->new;

# Create a request
my $req = HTTP::Request->new(GET => $url);

initscr();
start_color();

init_pair(1, COLOR_WHITE,  COLOR_BLACK);
init_pair(2, COLOR_YELLOW, COLOR_BLACK);
init_pair(3, COLOR_RED,    COLOR_BLACK);

clear();
addstr( 0, 0, "Fetching data..." );
refresh();

END {
  endwin();
}


while(1) {

  clear();

  my $updated = 'N/A';

  if($ua->is_online) {  

    my $response = $ua->request($req)->content;
    print $api_log "$response\n";
    $api_log->flush();

    my $data     = from_json($response);
    my $arrivals = $data->{arrivals};

    $updated = $data->{lastUpdated}; 

    attron(A_BOLD);

    my $count = scalar $arrivals;
    $count = 6 if $count > 6;

    print $api_log "count=$count\n";
    
    if($count > 0) {

      for( my $i = 0; $i < $count; $i++ ) {
        my $id    = @$arrivals[$i]->{routeId};
        my $dest  = @$arrivals[$i]->{destination};
        my $delay = @$arrivals[$i]->{estimatedWait};
  
        my $color = ($i % 2) + 1;
  
        my $line = sprintf( "%d  - %17s   %3s %7s", $i + 1, $dest, $id, $delay );
  
        attron(COLOR_PAIR($color));
        addstr( 2 + $i, 4, $line );
        attroff(COLOR_PAIR($color));
      }
  
    } else {
  
      attron(COLOR_PAIR(3));
      addstr( 2, 4, "Network failure / offline" );
      attroff(COLOR_PAIR(3));
    }
  
    attroff(A_BOLD);
    
    addstr( 0, 2, "Bus times for Pritchards road" );
    addstr( 9, 2, "Updated: $updated " );
  
    refresh();
  }

  select( undef, undef, undef, 20 );
}

